#include <iostream>
#include <conio.h>
#include <ctime>
#include <cstdlib>
using namespace std;

char PacMan = 'O';
int score = 0;
int PacPositionX = 14;
int PacPositionY = 23;
char map1[31][32];
bool pointEaten[31][32] = { false };

char ghost1 = '^';
char ghost2 = '^';
char ghost3 = '^';
char ghost4 = '^';
int GhostPositionX[4] = { 14, 13, 13, 14 };
int GhostPositionY[4] = { 15, 14, 13, 13 };

void InitializeGhosts() {
    for (int i = 0; i < 4; ++i) {
        GhostPositionX[i] = 14;
        GhostPositionY[i] = 15 - i;
    }
}

void CreateMap()
{
    char map1Proto[31][32] = {
        "############################",
        "#............##............#",
        "#.####.#####.##.#####.####.#",
        "#o####.#####.##.#####.####o#",
        "#.####.#####.##.#####.####.#",
        "#..........................#",
        "#.####.##.########.##.####.#",
        "#.####.##.########.##.####.#",
        "#......##....##....##......#",
        "######.#####.##.#####.######",
        "     #.#####.##.#####.#     ",
        "     #.##          ##.#     ",
        "     #.## ###  ### ##.#     ",
        "######.## #      # ##.######",
        "      .   #      #   .      ",
        "######.## #      # ##.######",
        "     #.## ######## ##.#     ",
        "     #.##          ##.#     ",
        "     #.## ######## ##.#     ",
        "######.## ######## ##.######",
        "#............##............#",
        "#.####.#####.##.#####.####.#",
        "#.####.#####.##.#####.####.#",
        "#o..##.......  .......##..o#",
        "###.##.##.########.##.##.###",
        "###.##.##.########.##.##.###",
        "#......##....##....##......#",
        "#.##########.##.##########.#",
        "#.##########.##.##########.#",
        "#..........................#",
        "############################" };

    for (int i = 0; i < 31; i++)
    {
        for (int j = 0; j < 32; j++)
        {
            map1[i][j] = map1Proto[i][j];
        }
    }

    map1[PacPositionY][PacPositionX] = PacMan;

    // Place ghosts on the map
    for (int i = 0; i < 4; ++i) {
        map1[GhostPositionY[i]][GhostPositionX[i]] = (i == 0) ? ghost1 : ((i == 1) ? ghost2 : ((i == 2) ? ghost3 : ghost4));
    }

    for (int i = 0; i < 31; i++)
    {
        for (int j = 0; j < 32; j++)
        {
            if (map1[i][j] == '#')
            {
                cout << "\033[34m" << map1[i][j];
            }
            else if (map1[i][j] == '.' && !pointEaten[i][j])
            {
                cout << "\033[33m" << map1[i][j];
            }
            else if (map1[i][j] == 'o')
            {
                cout << "\033[97m" << "o";
            }
            else if (map1[i][j] == PacMan)
            {
                cout << "\033[97m" << PacMan;
            }
            else if (map1[i][j] == ghost1)
            {
                cout << "\033[97m" << ghost1;
            }
            else if (map1[i][j] == ghost2)
            {
                cout << "\033[97m" << ghost2;
            }
            else if (map1[i][j] == ghost3)
            {
                cout << "\033[97m" << ghost3;
            }
            else if (map1[i][j] == ghost4)
            {
                cout << "\033[97m" << ghost4;
            }
            else {
                cout << " ";
            }

        }
        cout << endl;
    }
    cout << "Score:" << score;
}

void MovePacMan(char direction)
{
    switch (direction)
    {
    case 'w':
        if (map1[PacPositionY - 1][PacPositionX] != '#')
        {
            if (map1[PacPositionY - 1][PacPositionX] == '.' && !pointEaten[PacPositionY - 1][PacPositionX])
            {
                score++;
                pointEaten[PacPositionY - 1][PacPositionX] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionY--;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    case 's':
        if (map1[PacPositionY + 1][PacPositionX] != '#')
        {
            if (map1[PacPositionY + 1][PacPositionX] == '.' && !pointEaten[PacPositionY + 1][PacPositionX])
            {
                score++;
                pointEaten[PacPositionY + 1][PacPositionX] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionY++;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    case 'a':
        if (map1[PacPositionY][PacPositionX - 1] != '#')
        {
            if (map1[PacPositionY][PacPositionX - 1] == '.' && !pointEaten[PacPositionY][PacPositionX - 1])
            {
                score++;
                pointEaten[PacPositionY][PacPositionX - 1] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionX--;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    case 'd':
        if (map1[PacPositionY][PacPositionX + 1] != '#')
        {
            if (map1[PacPositionY][PacPositionX + 1] == '.' && !pointEaten[PacPositionY][PacPositionX + 1])
            {
                score++;
                pointEaten[PacPositionY][PacPositionX + 1] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionX++;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    default:
        break;
    }
}

bool IsGhostNear(int x, int y) {
    for (int i = 0; i < 4; ++i) {
        if (GhostPositionX[i] == x && GhostPositionY[i] == y) {
            return true;
        }
    }
    return false;
}

void MoveGhosts()
{
    for (int i = 0; i < 4; ++i) {
        // Calculate the movement direction towards PacMan
        int dx = 0, dy = 0;
        if (GhostPositionX[i] < PacPositionX) dx = 1;
        else if (GhostPositionX[i] > PacPositionX) dx = -1;
        if (GhostPositionY[i] < PacPositionY) dy = 1;
        else if (GhostPositionY[i] > PacPositionY) dy = -1;

        // Check if the next position is not a wall or another ghost
        if (map1[GhostPositionY[i] + dy][GhostPositionX[i] + dx] != '#' &&
            map1[GhostPositionY[i] + dy][GhostPositionX[i] + dx] != ghost1 &&
            map1[GhostPositionY[i] + dy][GhostPositionX[i] + dx] != ghost2 &&
            map1[GhostPositionY[i] + dy][GhostPositionX[i] + dx] != ghost3 &&
            map1[GhostPositionY[i] + dy][GhostPositionX[i] + dx] != ghost4) {
            // Move the ghost
            map1[GhostPositionY[i]][GhostPositionX[i]] = ' ';
            GhostPositionX[i] += dx;
            GhostPositionY[i] += dy;
            map1[GhostPositionY[i]][GhostPositionX[i]] = (i == 0) ? ghost1 : ((i == 1) ? ghost2 : ((i == 2) ? ghost3 : ghost4));
        }
        else {
            // If next position is occupied, move randomly
            int randMove = rand() % 4;
            switch (randMove) {
            case 0:
                if (map1[GhostPositionY[i] - 1][GhostPositionX[i]] != '#') {
                    map1[GhostPositionY[i]][GhostPositionX[i]] = ' ';
                    GhostPositionY[i]--;
                    map1[GhostPositionY[i]][GhostPositionX[i]] = (i == 0) ? ghost1 : ((i == 1) ? ghost2 : ((i == 2) ? ghost3 : ghost4));
                }
                break;
            case 1:
                if (map1[GhostPositionY[i] + 1][GhostPositionX[i]] != '#') {
                    map1[GhostPositionY[i]][GhostPositionX[i]] = ' ';
                    GhostPositionY[i]++;
                    map1[GhostPositionY[i]][GhostPositionX[i]] = (i == 0) ? ghost1 : ((i == 1) ? ghost2 : ((i == 2) ? ghost3 : ghost4));
                }
                break;
            case 2:
                if (map1[GhostPositionY[i]][GhostPositionX[i] - 1] != '#') {
                    map1[GhostPositionY[i]][GhostPositionX[i]] = ' ';
                    GhostPositionX[i]--;
                    map1[GhostPositionY[i]][GhostPositionX[i]] = (i == 0) ? ghost1 : ((i == 1) ? ghost2 : ((i == 2) ? ghost3 : ghost4));
                }
                break;
            case 3:
                if (map1[GhostPositionY[i]][GhostPositionX[i] + 1] != '#') {
                    map1[GhostPositionY[i]][GhostPositionX[i]] = ' ';
                    GhostPositionX[i]++;
                    map1[GhostPositionY[i]][GhostPositionX[i]] = (i == 0) ? ghost1 : ((i == 1) ? ghost2 : ((i == 2) ? ghost3 : ghost4));
                }
                break;
            default:
                break;
            }
        }

        if (PacPositionX == GhostPositionX[i] && PacPositionY == GhostPositionY[i]) {
            cout << "\nGame Over! You got caught by a ghost." << endl;
            exit(0);
        }
    }
}

int main()
{
    srand(time(NULL));
    InitializeGhosts();

    CreateMap();
    char direction;

    while (true)
    {
        direction = _getch();

        MovePacMan(direction);
        MoveGhosts();

        system("cls");

        CreateMap();
    }

    return 0;
}
