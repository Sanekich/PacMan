#include <iostream>
#include <conio.h>
using namespace std;

char PacMan = 'O';
int score = 0;
int PacPositionX = 14;
int PacPositionY = 23;
char map1[31][32];
bool pointEaten[31][32] = { false };

char ghost1 = '^';
char ghost2 = '^';
char ghost3 = '^';
char ghost4 = '^';

void CreateMap()
{
    char map1Proto[31][32] = {
        "############################",
        "#............##............#",
        "#.####.#####.##.#####.####.#",
        "#o####.#####.##.#####.####o#",
        "#.####.#####.##.#####.####.#",
        "#..........................#",
        "#.####.##.########.##.####.#",
        "#.####.##.########.##.####.#",
        "#......##....##....##......#",
        "######.#####.##.#####.######",
        "     #.#####.##.#####.#     ",
        "     #.##          ##.#     ",
        "     #.## ###  ### ##.#     ",
        "######.## #      # ##.######",
        "      .   #      #   .      ",
        "######.## #      # ##.######",
        "     #.## ######## ##.#     ",
        "     #.##          ##.#     ",
        "     #.## ######## ##.#     ",
        "######.## ######## ##.######",
        "#............##............#",
        "#.####.#####.##.#####.####.#",
        "#.####.#####.##.#####.####.#",
        "#o..##.......  .......##..o#",
        "###.##.##.########.##.##.###",
        "###.##.##.########.##.##.###",
        "#......##....##....##......#",
        "#.##########.##.##########.#",
        "#.##########.##.##########.#",
        "#..........................#",
        "############################" };

    for (int i = 0; i < 31; i++)
    {
        for (int j = 0; j < 32; j++)
        {
            map1[i][j] = map1Proto[i][j];
        }
    }

    map1[PacPositionY][PacPositionX] = PacMan;
    map1[15][14] = ghost1;
    map1[14][13] = ghost2;
    map1[15][13] = ghost3;
    map1[14][14] = ghost4;

    for (int i = 0; i < 31; i++)
    {
        for (int j = 0; j < 32; j++)
        {
            if (map1[i][j] == '#')
            {
                cout << "\033[34m" << map1[i][j];
            }
            else if (map1[i][j] == '.' && !pointEaten[i][j])
            {
                cout << "\033[33m" << map1[i][j];
            }
            else if (map1[i][j] == 'o')
            {
                cout << "\033[97m" << "o";
            }
            else if(map1[i][j] == PacMan)
            {
                cout << "\033[97m" << PacMan;
            }
            else if (map1[i][j] == ghost1)
            {
                cout << "\033[97m" << ghost1;
            }
            else if (map1[i][j] == ghost2)
            {
                cout << "\033[97m" << ghost2;
            }
            else if (map1[i][j] == ghost3)
            {
                cout << "\033[97m" << ghost3;
            }
            else if (map1[i][j] == ghost4)
            {
                cout << "\033[97m" << ghost4;
            }
            else {
                cout << " ";
            }

        }
        cout << endl;
    }
    cout << "Score:" << score;
}

void MovePacMan(char direction)
{
    switch (direction)
    {
    case 'w':
        if (map1[PacPositionY - 1][PacPositionX] != '#')
        {
            if (map1[PacPositionY - 1][PacPositionX] == '.' && !pointEaten[PacPositionY - 1][PacPositionX])
            {
                score++;
                pointEaten[PacPositionY - 1][PacPositionX] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionY--;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    case 's':
        if (map1[PacPositionY + 1][PacPositionX] != '#')
        {
            if (map1[PacPositionY + 1][PacPositionX] == '.' && !pointEaten[PacPositionY + 1][PacPositionX])
            {
                score++;
                pointEaten[PacPositionY + 1][PacPositionX] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionY++;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    case 'a':
        if (map1[PacPositionY][PacPositionX - 1] != '#')
        {
            if (map1[PacPositionY][PacPositionX - 1] == '.' && !pointEaten[PacPositionY][PacPositionX - 1])
            {
                score++;
                pointEaten[PacPositionY][PacPositionX - 1] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionX--;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    case 'd':
        if (map1[PacPositionY][PacPositionX + 1] != '#')
        {
            if (map1[PacPositionY][PacPositionX + 1] == '.' && !pointEaten[PacPositionY][PacPositionX + 1])
            {
                score++;
                pointEaten[PacPositionY][PacPositionX + 1] = true;
            }
            map1[PacPositionY][PacPositionX] = ' ';
            PacPositionX++;
            map1[PacPositionY][PacPositionX] = PacMan;
        }
        break;
    default:
        break;
    }
}

int main()
{
    CreateMap();
    char direction;

    while (true)
    {
        direction = _getch();

        MovePacMan(direction);

        system("cls");

        CreateMap();
    }

    return 0;
}
